{
  "Uuid": "6c5e7bc9-e687-4466-9a6b-02223b4bc34b",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Coloumn Setoff Faces_2023-2024",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "6cf02e07e198423782d8e6305816d13f",
      "Name": "Select View",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "",
      "Description": "All views available in the current document.",
      "SelectedIndex": -1
    },
    {
      "Id": "c1c383ac63d44d8aaf3841884ecf41c6",
      "Name": "offset value =  Value x 1/2 the face size",
      "Type": "number",
      "Type2": "number",
      "Value": "3",
      "NumberType": "Double",
      "Description": "Creates a number",
      "SelectedIndex": 0
    },
    {
      "Id": "1ee8e9c0a5274f58a146fc4223a8da22",
      "Name": "Pick Grids",
      "Type": "selection",
      "Type2": "hostSelection",
      "Value": "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167703,9a61a310-3e64-4f7d-ba97-274dafba81f6-00167718,9a61a310-3e64-4f7d-ba97-274dafba81f6-00167722,9a61a310-3e64-4f7d-ba97-274dafba81f6-0016772c,9a61a310-3e64-4f7d-ba97-274dafba81f6-00167736,9a61a310-3e64-4f7d-ba97-274dafba81f6-00167740,9a61a310-3e64-4f7d-ba97-274dafba81f6-0016774a,9a61a310-3e64-4f7d-ba97-274dafba81f6-00167754,9a61a310-3e64-4f7d-ba97-274dafba81f6-0016775e,9a61a310-3e64-4f7d-ba97-274dafba81f6-00167768,9a61a310-3e64-4f7d-ba97-274dafba81f6-00167772,9a61a310-3e64-4f7d-ba97-274dafba81f6-0016777c,9a61a310-3e64-4f7d-ba97-274dafba81f6-001677ae,9a61a310-3e64-4f7d-ba97-274dafba81f6-001677b8",
      "Description": "Select multiple elements from the Revit document filtered by Category.",
      "SelectedIndex": 0
    },
    {
      "Id": "58730468aaf8479d9c78fbbe13b23b88",
      "Name": "Pick Columns",
      "Type": "selection",
      "Type2": "hostSelection",
      "Value": "1577afa8-cc99-4fb5-a140-3687081cd958-00168550,1577afa8-cc99-4fb5-a140-3687081cd958-00168551,1577afa8-cc99-4fb5-a140-3687081cd958-00168552,1577afa8-cc99-4fb5-a140-3687081cd958-00168553,1577afa8-cc99-4fb5-a140-3687081cd958-00168554,1577afa8-cc99-4fb5-a140-3687081cd958-00168555,1577afa8-cc99-4fb5-a140-3687081cd958-00168556,1577afa8-cc99-4fb5-a140-3687081cd958-00168557,1577afa8-cc99-4fb5-a140-3687081cd958-00168558,1577afa8-cc99-4fb5-a140-3687081cd958-00168559,1577afa8-cc99-4fb5-a140-3687081cd958-0016855a,1577afa8-cc99-4fb5-a140-3687081cd958-0016855b,1577afa8-cc99-4fb5-a140-3687081cd958-0016855c,1577afa8-cc99-4fb5-a140-3687081cd958-0016855d,1577afa8-cc99-4fb5-a140-3687081cd958-0016855e,1577afa8-cc99-4fb5-a140-3687081cd958-0016855f,1577afa8-cc99-4fb5-a140-3687081cd958-00168560,1577afa8-cc99-4fb5-a140-3687081cd958-00168561,1577afa8-cc99-4fb5-a140-3687081cd958-00168562,1577afa8-cc99-4fb5-a140-3687081cd958-00168563,1577afa8-cc99-4fb5-a140-3687081cd958-00168564,1577afa8-cc99-4fb5-a140-3687081cd958-00168565,1577afa8-cc99-4fb5-a140-3687081cd958-00168566,1577afa8-cc99-4fb5-a140-3687081cd958-00168579",
      "Description": "Select multiple elements from the Revit document filtered by Category.",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [
    {
      "Id": "4b768196328c43f9b02af4514950fb48",
      "Name": "Watch",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Visualizes a node's output"
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "Id": "d77e9cbaf4d144cb85306095892d171c",
      "NodeType": "ExtensionNode",
      "Inputs": [
        {
          "Id": "b6cc7b85a59b4b0fbac0a8a680c827d7",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ebb964c564804ac9a381458553001753",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "c40245fed76f4fc7b89461e554cc6edf",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "bb924a505ed94476851c31253c351e59",
          "Name": "grid",
          "Description": "Revit.Elements.Grid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "802f030240dc4c15b092fe71a7caf33f",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Revit.Elements.Grid.Curve",
      "Replication": "Auto",
      "Description": "Get the underlying Curve geometry from this Element\n\nGrid.Curve: Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "db938b722da44215935d28d8bf236450",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "6964788fa7de4dbabe9744579f84b69f",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a4bdc8560cbb4d438fa0da1d44fadee6",
          "Name": "BoundingBox",
          "Description": "BoundingBox",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Revit.Elements.Element.BoundingBox",
      "Replication": "Auto",
      "Description": "Get an Axis-aligned BoundingBox of the Element\n\nElement.BoundingBox: BoundingBox"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "40c0be85e60b49c58eb4f0000c2bd43e",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "1dfebfeb6f5c400ca6a23813be530c2e",
          "Name": "boundingBox",
          "Description": "Autodesk.DesignScript.Geometry.BoundingBox",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b56a74b34a8d46ce953be69e9399a7c9",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.BoundingBox.MinPoint",
      "Replication": "Auto",
      "Description": "The minimum point\n\nBoundingBox.MinPoint: Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "67753468a4b1417180f915aa0265633f",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "e43b093b009e4c46846e6847cdc5b5af",
          "Name": "boundingBox",
          "Description": "Autodesk.DesignScript.Geometry.BoundingBox",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "086dc84d71614410a0936ddfb366c1da",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.BoundingBox.MaxPoint",
      "Replication": "Auto",
      "Description": "The maximum point\n\nBoundingBox.MaxPoint: Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "7e8dc314273c4ee2a0bec97ee978d4c2",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "73490712f9b44d6e8927ed4fb53b3d6b",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8cd5f644e775403e8721d754110f4e39",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.X",
      "Replication": "Auto",
      "Description": "Get the X component of a Point\n\nPoint.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "d686e2e71dc545fab5ce9ef2b1b16b64",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "0e3213fd2d6b4782bc76dab1b9124c04",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "231393d60f99417889b3eb1c8d1e6cc7",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Y",
      "Replication": "Auto",
      "Description": "Get the Y component of a Point\n\nPoint.Y: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "ee56d1b885814c0e86bd25d614c73094",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "65d431921f644c2f98abdbce330410c7",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "24814843236b44bdbc0789f5c1ec86fb",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "82eb98fd43a34decb3af4dbe5eebc147",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "5f8a6b35f6a44d18b827684ec11a70b4",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1190d32b5aa744ad990911bacfeb6ab0",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.X",
      "Replication": "Auto",
      "Description": "Get the X component of a Point\n\nPoint.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "3bbcd1328faa47a78af4a907d2d79b2e",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "000e844121044ce39bf3693e40ab26d7",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0c516a7a876a4b3ca02f591825eeb1a6",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Y",
      "Replication": "Auto",
      "Description": "Get the Y component of a Point\n\nPoint.Y: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "113009fe601f42788ff8c51c9038bd13",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "32ce206b2baf4e3a8ca87c45c41cc888",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0ff9d982b2af4e549136f1edab5b33a4",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "f26231c47d6e49a29037551d303ce19f",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "cdf8abc567cd47049190c19f3ee76a1e",
          "Name": "x",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ea3fe0216367475691f38c55bd51f947",
          "Name": "y",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d7bc467eb1fb4a1cad1230f734a712f9",
          "Name": "var",
          "Description": "The sum of two input numbers, or the concatenation of two strings",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Replication": "Auto",
      "Description": "Returns addition of x and y\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "fcc1bf0c35004c3a871c4f46d9745745",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "973c8da38c7c44398f176cf58d0265cb",
          "Name": "x",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "34774e2b9ada4dd2b1cbf6da7bc50a10",
          "Name": "y",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "38b75a4df96d480f93495e9dc19d512f",
          "Name": "var",
          "Description": "The sum of two input numbers, or the concatenation of two strings",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Replication": "Auto",
      "Description": "Returns addition of x and y\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "9e99ad499739459f8a99c3d7c744af44",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "b47cbecc128d4bda8cd665498040d73c",
          "Name": "x",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "46b29bff0a67498f9d77e6291d5ab335",
          "Name": "y",
          "Description": "Integer value, double value or string\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e9e9e5e21b9246cdb1e0e48c6ed6bac4",
          "Name": "var",
          "Description": "The sum of two input numbers, or the concatenation of two strings",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Replication": "Auto",
      "Description": "Returns addition of x and y\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "41b8f083836042559d7a2491a3881a60",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "028cace605a3435bb4157088f7c837e6",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e793c6f51ec5497fab179e48e7eee5e3",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4d0db00c916f4d3cb8557b9c7cdeb648",
          "Name": "double",
          "Description": "Result of division",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "/@var[]..[],var[]..[]",
      "Replication": "Auto",
      "Description": "Returns division of x over y\n\n/ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "58fc7d64a25e43f8846090d506983f55",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "391af9e34b75432bb39d641b6620781f",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5bd41bd4ecdd4623bfdc732fdee25c49",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8125f92179d7453ca1123aa7b6033208",
          "Name": "double",
          "Description": "Result of division",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "/@var[]..[],var[]..[]",
      "Replication": "Auto",
      "Description": "Returns division of x over y\n\n/ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "3655cfa026b645fcacef905b45d7948d",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "6f78b6977bed4be6af18edd9639f0876",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "46e9d7a326364fa895586b6faf4d7e11",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ce5260aa600b45c290fa0536bd7c0bd9",
          "Name": "double",
          "Description": "Result of division",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "/@var[]..[],var[]..[]",
      "Replication": "Auto",
      "Description": "Returns division of x over y\n\n/ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NumberType": "Double",
      "Id": "41a57546715d4338a5e9b809f3a2994d",
      "NodeType": "NumberInputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "84277273567145688c993ac9dcdc00c7",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number",
      "InputValue": 2.0
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "7f0456ae28944e5b93fe91761354b462",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "599e5a20d0304c3787385691637379fb",
          "Name": "x",
          "Description": "X coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6349f81924444727a7c0364edfdc4200",
          "Name": "y",
          "Description": "Y coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "918bd05400e54cf5afcb92ea42cfb578",
          "Name": "z",
          "Description": "Z coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ffe21cbc9b8b435ba4274db9b037e23a",
          "Name": "Point",
          "Description": "Point created by coordinates",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "4ad16038c6714443aa83ed74fbea7c49",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "186fb717c9044a4ea27d803bd25e4ece",
          "Name": "x",
          "Description": "X coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "45e22310caa34b94b34e5e20ec2d7744",
          "Name": "y",
          "Description": "Y coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bff1a2d3dce74d94bbeb368119e9a501",
          "Name": "z",
          "Description": "Z coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "44c0bcf2515a4001b50d8fb98b2a6b06",
          "Name": "Point",
          "Description": "Point created by coordinates",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "5f989981ae1c4e22af705a7202e0d9e1",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "60ad0ba519294d25a9b80f5d4e6116d9",
          "Name": "x",
          "Description": "X coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7de5bdb4fdfb4f9e92445d37d4f07a44",
          "Name": "y",
          "Description": "Y coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9409d498634f4459b11dedaeb3d348bc",
          "Name": "z",
          "Description": "Z coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e31eba8369b144d9970c39f36b4199ff",
          "Name": "Point",
          "Description": "Point created by coordinates",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "24d7696561864e289675c4a48ae7994f",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "1b9b1f268baa47c8abbf3684adbcf929",
          "Name": "x",
          "Description": "X coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "efeae288951b4f6bac962a76732a0408",
          "Name": "y",
          "Description": "Y coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd0b86ad27644005a9f19747ba602552",
          "Name": "z",
          "Description": "Z coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f13a8d40244b4bf1bb73f3561710d014",
          "Name": "Point",
          "Description": "Point created by coordinates",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "Id": "e8adbef495664bf69a23e1cdd166048b",
      "NodeType": "ExtensionNode",
      "Inputs": [
        {
          "Id": "f2807a2728e04981b116d2ee6c8e4151",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2fe9b6dc45404606bfdd475eab2e1fb1",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2b454fcf516945c089b23f771689a761",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list from the given inputs"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "Id": "d46c8462b4a24ebaa61cbcf25602ffbb",
      "NodeType": "ExtensionNode",
      "Inputs": [
        {
          "Id": "914a4b5f1b694c19a7a71e2e61b84a8c",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eeb461e96a2a48e088c02229660ef436",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5bfd478a95714bf1aa1bfb1d020570be",
          "Name": "list",
          "Description": "A list (type: var[]..[])",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list from the given inputs"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# --- Inputs ---\r\nface_pts_x_all = IN[0]  # List of [–X, +X] points per column\r\nface_pts_y_all = IN[1]  # List of [–Y, +Y] points per column\r\ngrid_lines = IN[2]      # All Revit grid curves\r\n\r\n# --- STEP 1: Classify Grids into Horizontal and Vertical ---\r\nhorizontal_grids = []\r\nvertical_grids = []\r\n\r\nfor g in grid_lines:\r\n    if not isinstance(g, Line):\r\n        continue\r\n    sp = g.StartPoint\r\n    ep = g.EndPoint\r\n    dx = abs(ep.X - sp.X)\r\n    dy = abs(ep.Y - sp.Y)\r\n    if dx > dy:\r\n        horizontal_grids.append(g)  # left-right (for Y face)\r\n    else:\r\n        vertical_grids.append(g)    # up-down (for X face)\r\n\r\n# --- STEP 2: Flatten to XY plane ---\r\ndef flatten_point(pt):\r\n    return Point.ByCoordinates(pt.X, pt.Y, 0)\r\n\r\ndef shortest_vector_to_grids(pt, grids):\r\n    if pt is None: return None, float('inf')\r\n    pt2d = flatten_point(pt)\r\n    min_dist = float('inf')\r\n    best_vector = None\r\n    for grid in grids:\r\n        proj = flatten_point(grid.ClosestPointTo(pt))\r\n        dist = pt2d.DistanceTo(proj)\r\n        if dist < min_dist:\r\n            min_dist = dist\r\n            best_vector = Line.ByStartPointEndPoint(pt, proj)\r\n    return best_vector, min_dist\r\n\r\n# --- STEP 3: Loop through all columns (manual longest logic) ---\r\nvectors_x = []\r\nvectors_y = []\r\n\r\ncount = max(len(face_pts_x_all), len(face_pts_y_all))\r\n\r\nfor i in range(count):\r\n    # Safely get current face point pairs\r\n    fx = face_pts_x_all[i] if i < len(face_pts_x_all) else [None, None]\r\n    fy = face_pts_y_all[i] if i < len(face_pts_y_all) else [None, None]\r\n\r\n    # Check for valid face points\r\n    if fx is None or len(fx) < 2:\r\n        vectors_x.append(None)\r\n    else:\r\n        vec1, dist1 = shortest_vector_to_grids(fx[0], vertical_grids)  # –X\r\n        vec2, dist2 = shortest_vector_to_grids(fx[1], vertical_grids)  # +X\r\n        vectors_x.append(vec1 if dist1 < dist2 else vec2)\r\n\r\n    if fy is None or len(fy) < 2:\r\n        vectors_y.append(None)\r\n    else:\r\n        vec1, dist1 = shortest_vector_to_grids(fy[0], horizontal_grids)  # –Y\r\n        vec2, dist2 = shortest_vector_to_grids(fy[1], horizontal_grids)  # +Y\r\n        vectors_y.append(vec1 if dist1 < dist2 else vec2)\r\n\r\n# --- Final Output ---\r\nOUT = vectors_x, vectors_y\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "b25322d3c3714119aa48929144a8ddd3",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "67ead460238b43abb166dfc3cbf81885",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c61b1ecf57924ff5a88d93d47dfce4ed",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d49a8e866ab74be8865fe828bfac53aa",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "532634dbaaef4b49956e3e1ec986b36b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "a08e53138b86441bb9da1a2a93d64298",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "4f442de1575c48a6a0b0aeb3d52764b1",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "872bdb9e9d014138a709c0c810d32d77",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "05c32433f5224a0d9f186e247cfe7ae8",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "a97b8f5d8d884f359fd587e431cbbe46",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "15bcd508c27e422d901353ea0366dd8b",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "8a3989a0990b4141b2a5b17c8470df98",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "077df5b40af84c00ab87002b0ecddee9",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d29c639b99e3465794a8867908e2f233",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1d7a04842a9348b5957c0742ea4c8e39",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "Id": "d4bc9e2ea7124f46a4904fc3d3551a03",
      "NodeType": "CodeBlockNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6885904df0884578b0d92d541867bbbc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dcc8f67eb68645d28e3bb7c03132bc6c",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly",
      "Code": "0;\n1;"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "87db0d70e586486eadaf673736eeaabd",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "367082cca67e4f4999b3afef5943b477",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "416b754631e04b2b8af80b9e3a1cd05e",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ccf532776f43465f901381121e6e521c",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "c357c643-1fcb-48fa-9ae3-ba2e68004d94",
      "FunctionType": "Graph",
      "Id": "ea207a37e3104a6eac876f397d3fa371",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "ce1e436c594e465c81e23ea2f63f48e7",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "70de61f7ba5042339f5eac60e8731d8c",
          "Name": "Top Surface",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8d13322da72040ba878aecff5b6124b6",
          "Name": "Top Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d8209cdb040a4ee38c947ab6bd0f6ee2",
          "Name": "Bottom Surface",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4c18e66329464eb996bdae5d3f86fa89",
          "Name": "Bottom Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c99012dbab4f499a9446d34e4b9e292a",
          "Name": "XAxis Surface",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4c00a930e26841abb320639a7933d928",
          "Name": "XAxis Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c3b54c4b67d84087b601609e24214daf",
          "Name": "-XAxis Surface",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6cf0fe6276d045e9b1ea36fc846318e3",
          "Name": "-XAxis  Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e5befb3f183e47aabea2d3e23d4075c4",
          "Name": "YAxis Surface",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fc08d71b0b30411b8a382b8daf9e3780",
          "Name": "YAxis Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "47f23497b9a24b5fab8f6f883e6486f1",
          "Name": "-YAxis Surface",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "81cebe3d4c4e4f30893638542314951c",
          "Name": "-YAxis Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "75c73287186c46b9912bf96b3e32b74f",
          "Name": "Vertical Surface",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b2e9bc0d7a0c43ae8230993a2bc40f89",
          "Name": "Vertical Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieve the top, bottom, side surfaces and their associated references of the system family.\r\nThis doesn't work with cylindrical system families (pipe...)"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "ef5668faf4364ee6854b41a7eb6e0ff8",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "6006eccc7c9d435f9aff0186134e1642",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1694f3043cec426c9661cc10542d7cd2",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6e9b0e61460443f9808300291f480ec1",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "e44e5787dcd644518aba362803a37ef2",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "7723d7fa1c7b49d69d4fa89d504ba68f",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7a5858bb21bd43a59c6c15aa5ff0f606",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "34d874e87c9343de84f977df26438480",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "0725e92cb6354ee6b77b26264c87a858",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "ee8c0ea5a1cf4a7193f2399ae01774af",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "107665a86646472390ddc779f9eea26b",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b19f1ac76283404fb4e311af19fe44b4",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "96f50b5598254ab9826aad9c6ad42268",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "8c7a5c49f53f42af9b153ff9e249f21c",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "de9e7238beca47b2bf8492efe0fa2118",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a30f3bb8481940d8b1af7ab8a7eb668d",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nSplit a list of Grid elements into horizontal (X-direction)\r\nand vertical (Y-direction) groups.\r\n\r\nIN[0] : grids_in  list[Grid elements]  (Dynamo wrappers)\r\n\r\nOUT[0] : horizontal_grids  list[Grid elements]\r\nOUT[1] : vertical_grids    list[Grid elements]\r\n\"\"\"\r\n\r\nimport clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitNodes')\r\n\r\nfrom Autodesk.Revit.DB import Grid\r\nfrom RevitServices.Persistence import DocumentManager\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)          # UnwrapElement()\r\n\r\n# ---------- INPUT ----------\r\ngrids_in = IN[0]  # expect flat list of Dynamo Grid elements\r\n\r\n# ---------- PROCESS ----------\r\nhorizontal_grids = []\r\nvertical_grids   = []\r\n\r\nfor g_dy in grids_in:\r\n    db_grid = UnwrapElement(g_dy)\r\n    if not isinstance(db_grid, Grid):\r\n        continue                        # skip any stray geometry/nulls\r\n\r\n    curve = db_grid.Curve               # DB.Line or DB.Arc\r\n    sp, ep = curve.GetEndPoint(0), curve.GetEndPoint(1)\r\n    dx, dy = abs(ep.X - sp.X), abs(ep.Y - sp.Y)\r\n\r\n    if dx > dy:                         # more horizontal\r\n        horizontal_grids.append(db_grid)\r\n    else:                               # more vertical (or equal)\r\n        vertical_grids.append(db_grid)\r\n\r\n# ---------- OUTPUT ----------\r\nOUT = horizontal_grids, vertical_grids\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "0a725bb60f284f48816e57b85d98ad53",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "3b37d1feb40748dbaadf784507656a3f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "629735eb67274ffb8276982525d603c0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "0d0a6c24a9fe403cad1fc85d5049c1f2",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "1fd25b941496457590c6ac07044065ad",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb80e1472240400184db222b8febd5bd",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "897af15a78db4fe0b6ec9a63dff94ba6",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "Id": "9e5047adba234e3eae0e51eb85290cc4",
      "NodeType": "CodeBlockNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4f227cc3d10c407fb31e20865e1b11df",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "df860a8f29604228a8843392d15a98e4",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly",
      "Code": "0;\n1;"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "92c2dc5eb296411faab0edb658e35dbf",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "a2fe215792ed416bb2307358418dae45",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "de3e392420f84c97b5ccd7d316ad9d5a",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f7b6aed6e80244a98d91c5d27cdba4aa",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# IN[0] : xMinusRefs  list[Reference]   (–X face)\r\n# IN[1] : xPlusRefs   list[Reference]   (+X face)\r\n# IN[2] : vectors_x   list[DS Line]\r\n\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import Line\r\n\r\nminus, plus, vecs = IN\r\nchosen = []\r\n\r\nfor m, p, v in zip(minus, plus, vecs):\r\n    if v is None:               # skip if no vector\r\n        chosen.append(None)\r\n        continue\r\n    # compare which face the vector starts from:\r\n    #  • if its StartPoint equals (or is very close to) the –X face point, pick m\r\n    #  • otherwise pick p\r\n    if abs(v.StartPoint.X - v.EndPoint.X) < 1e-6:   # vertical vector ⇒ must be ±X faces\r\n        chosen.append(m if v.StartPoint.X < v.EndPoint.X else p)\r\n    else:\r\n        # safer: use whichever reference lives on the smaller distance\r\n        chosen.append(m)        # fallback: assume you know order\r\nOUT = chosen\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "5964293c9730428da9aed46620d3e876",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "dc540cb9586a4278aece093701ab9806",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b9729e813d4468a89bfb8b08fdb435d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0bd010c9471144f7bc1c18b938d9f963",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c50284bc03834f37b8bb5beae74cf5cd",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# IN[0] : xMinusRefs  list[Reference]   (–X face)\r\n# IN[1] : xPlusRefs   list[Reference]   (+X face)\r\n# IN[2] : vectors_x   list[DS Line]\r\n\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import Line\r\n\r\nminus, plus, vecs = IN\r\nchosen = []\r\n\r\nfor m, p, v in zip(minus, plus, vecs):\r\n    if v is None:               # skip if no vector\r\n        chosen.append(None)\r\n        continue\r\n    # compare which face the vector starts from:\r\n    #  • if its StartPoint equals (or is very close to) the –X face point, pick m\r\n    #  • otherwise pick p\r\n    if abs(v.StartPoint.X - v.EndPoint.X) < 1e-6:   # vertical vector ⇒ must be ±X faces\r\n        chosen.append(m if v.StartPoint.X < v.EndPoint.X else p)\r\n    else:\r\n        # safer: use whichever reference lives on the smaller distance\r\n        chosen.append(m)        # fallback: assume you know order\r\nOUT = chosen\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "140801384bc1405a8452353a00eff72c",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "c86acbd0b1384f43a2429b8ac92be804",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7d699c0fc3c94738ad9d428c3574f1ac",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5fbf700e7e0a42c09ec94f4fae29ee64",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f63449056e14803957c062b57c5127e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "c74cdf50-fd7b-436a-8e2d-6b6e50879034",
      "FunctionType": "Graph",
      "Id": "4fd5859de567406a959dca029f8f4d01",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "79cbbda8e850437e8eb006e439a36d48",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bc49277ec389498db67b21e74f376f17",
          "Name": "Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets the reference of a geometric object or a dimension or a reference plane."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "c74cdf50-fd7b-436a-8e2d-6b6e50879034",
      "FunctionType": "Graph",
      "Id": "e757efef4024424fb7a40646c0cd6e56",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "5d1ff659c0d243699dcc65f16722a32f",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b30f9eadc1b2481c8650866152904702",
          "Name": "Reference",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets the reference of a geometric object or a dimension or a reference plane."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "0d3af6338cc344cfa3214c8ffd125315",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "e1564fbaf93c492ba9ace3cc72caae5c",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b5aee7f987884a7aab54ca0ad570abd1",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "49c5b0e44c354d5aaffd785544d1e870",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "036d0f30219747309c2fd4a1b7476e84",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "c916f24427924a48b12cd085eb46cad5",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4dd3948aa6f24c3d9eb4f3dfb27f9a41",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Replication": "Auto",
      "Description": "Get the Name of the Element\n\nElement.Name: string"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfType, DSRevitNodesUI",
      "Id": "ee89902c14ba43d1a14029cf390982d6",
      "NodeType": "ExtensionNode",
      "Inputs": [
        {
          "Id": "a7832ed103bc4d7ea2e372c9c9ff9430",
          "Name": "element class",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6ec253421f82458b8f6771d78764ce50",
          "Name": "elements",
          "Description": "All elements in the active document of a given class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All elements in the active document of a given class."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementTypes, DSRevitNodesUI",
      "SelectedIndex": 84,
      "SelectedString": "DimensionType",
      "Id": "7bc58f90242445c9b7b224a605f99c25",
      "NodeType": "ExtensionNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3ca8bd8a20384cc3bcbc3785e50d220b",
          "Name": "Classes",
          "Description": "The selected Classes",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All element subclasses."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "Id": "bffa187accb14d6ca1ba40fd7e041fc8",
      "NodeType": "CodeBlockNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3e4966e9bb9743b7b3c9249c1bc3eb34",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly",
      "Code": "0;"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# -*- coding: utf-8 -*-\r\nimport clr, math\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitNodes')\r\nclr.AddReference('ProtoGeometry')\r\n\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# ---------- INPUTS ----------\r\nview_dy, vectors, col_refs, grids_in, dimType_in, offset_multiplier = IN\r\nview    = UnwrapElement(view_dy)\r\ndoc     = DocumentManager.Instance.CurrentDBDocument\r\ndimType = UnwrapElement(dimType_in) if dimType_in else None\r\nmult    = offset_multiplier if offset_multiplier else 1.0\r\n\r\n# ---------- helpers ----------\r\ndef unit_xy(xyz):\r\n    return XYZ(xyz.X, xyz.Y, 0.0).Normalize()\r\n\r\ndef is_perpendicular(v1, v2):\r\n    return abs(v1.DotProduct(v2)) < 0.3\r\n\r\ndef face_matches(face, vec):\r\n    try:\r\n        n = face.ComputeNormal(UV(0.5, 0.5))\r\n        return unit_xy(n).IsAlmostEqualTo(vec, 1e-3)\r\n    except:\r\n        return False\r\n\r\ndef ref_sort_key(r, axis):\r\n    el = doc.GetElement(r.ElementId)\r\n    geo = el.GetGeometryObjectFromReference(r)\r\n    if isinstance(geo, PlanarFace):\r\n        pt = geo.Origin\r\n    elif isinstance(geo, Edge):\r\n        pt = geo.AsCurve().Evaluate(0.5, True)\r\n    elif isinstance(el, Grid):\r\n        ln = el.Curve if isinstance(el.Curve, Line) else None\r\n        pt = ln.Evaluate(0.5, True) if ln else XYZ.Zero\r\n    else:\r\n        pt = XYZ.Zero\r\n    return pt.DotProduct(axis)\r\n\r\n# ---------- collect straight grids ----------\r\ngrids = []\r\nfor g in grids_in:\r\n    g_db = UnwrapElement(g)\r\n    if isinstance(g_db, Grid) and isinstance(g_db.Curve, Line):\r\n        g_ref = Reference(g_db)\r\n        grids.append((g_db.Curve, g_ref))\r\n\r\n# ---------- MAIN ----------\r\nsuccess = []\r\nfailures = []\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nfor idx, (col_ref, vec) in enumerate(zip(col_refs, vectors)):\r\n    try:\r\n        if not col_ref or not vec:\r\n            failures.append(\"Index {}: Missing reference or vector\".format(idx))\r\n            continue\r\n\r\n        line = vec.ToRevitType()\r\n        v_dir = unit_xy(line.Direction)  # Face direction (+ side)\r\n        axis = unit_xy(XYZ(-v_dir.Y, v_dir.X, 0))  # Dimension axis\r\n        v_end = line.GetEndPoint(1)\r\n\r\n        column = doc.GetElement(col_ref)\r\n        if not column:\r\n            failures.append(\"Index {}: Column not found\".format(idx))\r\n            continue\r\n\r\n        bb = column.get_BoundingBox(view)\r\n        if not bb:\r\n            failures.append(\"Index {}: No bounding box\".format(idx))\r\n            continue\r\n        w = abs(bb.Max.X - bb.Min.X)\r\n        d = abs(bb.Max.Y - bb.Min.Y)\r\n\r\n        opts = Options()\r\n        opts.ComputeReferences = True\r\n        opts.IncludeNonVisibleObjects = True\r\n        face_plus = face_minus = None\r\n        for sol in (g for g in column.get_Geometry(opts) if isinstance(g, Solid)):\r\n            for f in sol.Faces:\r\n                if face_matches(f,  v_dir): face_plus = f.Reference\r\n                if face_matches(f, -v_dir): face_minus = f.Reference\r\n            if face_plus and face_minus:\r\n                break\r\n        if not (face_plus and face_minus):\r\n            failures.append(\"Index {}: Could not find both + and - face references\".format(idx))\r\n            continue\r\n\r\n        # Nearest perpendicular grid\r\n        best_grid_ref, best_dist = None, 1e9\r\n        for g_curve, g_ref in grids:\r\n            if not is_perpendicular(v_dir, unit_xy(g_curve.Direction)):\r\n                continue\r\n            dist = g_curve.Project(v_end).Distance\r\n            if dist < best_dist:\r\n                best_dist, best_grid_ref = dist, g_ref\r\n        if not best_grid_ref:\r\n            failures.append(\"Index {}: No perpendicular grid found\".format(idx))\r\n            continue\r\n\r\n        # ---- Grid-to-nearest-face dimension (+ offset) ----\r\n        refs_gf = sorted([best_grid_ref, face_plus], key=lambda r: ref_sort_key(r, axis))\r\n        ref_arr_gf = ReferenceArray()\r\n        for r in refs_gf:\r\n            ref_arr_gf.Append(r)\r\n\r\n        off_vec_gf = XYZ(0, (d/2.0)*mult, 0) if abs(v_dir.X) > abs(v_dir.Y) else XYZ((w/2.0)*mult, 0, 0)\r\n        pt0_gf = line.GetEndPoint(0).Add(off_vec_gf)\r\n        pt1_gf = line.GetEndPoint(1).Add(off_vec_gf)\r\n        dim_line_gf = Line.CreateBound(pt0_gf, pt1_gf)\r\n\r\n        try:\r\n            dim_gf = doc.Create.NewDimension(view, dim_line_gf, ref_arr_gf, dimType) if dimType else doc.Create.NewDimension(view, dim_line_gf, ref_arr_gf)\r\n            success.append(dim_gf)\r\n        except Exception as e:\r\n            failures.append(\"Index {}: Grid-to-face dimension failed - {}\".format(idx, str(e)))\r\n\r\n        # ---- Face-to-face dimension (- offset) ----\r\n        refs_ff = sorted([face_plus, face_minus], key=lambda r: ref_sort_key(r, axis))\r\n        ref_arr_ff = ReferenceArray()\r\n        for r in refs_ff:\r\n            ref_arr_ff.Append(r)\r\n\r\n        off_vec_ff = XYZ(0, -(d/2.0)*mult, 0) if abs(v_dir.X) > abs(v_dir.Y) else XYZ(-(w/2.0)*mult, 0, 0)\r\n        pt0_ff = line.GetEndPoint(0).Add(off_vec_ff)\r\n        pt1_ff = line.GetEndPoint(1).Add(off_vec_ff)\r\n        dim_line_ff = Line.CreateBound(pt0_ff, pt1_ff)\r\n\r\n        try:\r\n            dim_ff = doc.Create.NewDimension(view, dim_line_ff, ref_arr_ff, dimType) if dimType else doc.Create.NewDimension(view, dim_line_ff, ref_arr_ff)\r\n            success.append(dim_ff)\r\n        except Exception as e:\r\n            failures.append(\"Index {}: Face-to-face dimension failed - {}\".format(idx, str(e)))\r\n\r\n    except Exception as e_outer:\r\n        failures.append(\"Index {}: Script error - {}\".format(idx, str(e_outer)))\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# ---------- OUTPUT ----------\r\nOUT = (success, failures)\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "8d78ac0532bf470992d28de58cfc5717",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "92e93e0a47f946b6ba8aa2316894b26d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2abf920e3f4a4e778181d19f42e137a9",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e73e57deb77c404bbb6444b5deb34283",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cdb040e73401408ea84a50e9afc67e28",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a82f6f21b58a4cb69642c995b31ce773",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7d1d0ac845f9432b8eff90ac8b7a0cb2",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dfa096c6281c4f4d8c2d7da6fb595c25",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# -*- coding: utf-8 -*-\r\nimport clr, math\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nclr.AddReference('RevitNodes')\r\nclr.AddReference('ProtoGeometry')\r\n\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n# ---------- INPUTS ----------\r\nview_dy, vectors, col_refs, grids_in, dimType_in, offset_multiplier = IN\r\nview    = UnwrapElement(view_dy)\r\ndoc     = DocumentManager.Instance.CurrentDBDocument\r\ndimType = UnwrapElement(dimType_in) if dimType_in else None\r\nmult    = offset_multiplier if offset_multiplier else 1.0\r\n\r\n# ---------- helpers ----------\r\ndef unit_xy(xyz):\r\n    return XYZ(xyz.X, xyz.Y, 0.0).Normalize()\r\n\r\ndef is_perpendicular(v1, v2):\r\n    return abs(v1.DotProduct(v2)) < 0.3\r\n\r\ndef face_matches(face, vec):\r\n    try:\r\n        n = face.ComputeNormal(UV(0.5, 0.5))\r\n        return unit_xy(n).IsAlmostEqualTo(vec, 1e-3)\r\n    except:\r\n        return False\r\n\r\ndef ref_sort_key(r, axis):\r\n    el = doc.GetElement(r.ElementId)\r\n    geo = el.GetGeometryObjectFromReference(r)\r\n    if isinstance(geo, PlanarFace):\r\n        pt = geo.Origin\r\n    elif isinstance(geo, Edge):\r\n        pt = geo.AsCurve().Evaluate(0.5, True)\r\n    elif isinstance(el, Grid):\r\n        ln = el.Curve if isinstance(el.Curve, Line) else None\r\n        pt = ln.Evaluate(0.5, True) if ln else XYZ.Zero\r\n    else:\r\n        pt = XYZ.Zero\r\n    return pt.DotProduct(axis)\r\n\r\n# ---------- collect straight grids ----------\r\ngrids = []\r\nfor g in grids_in:\r\n    g_db = UnwrapElement(g)\r\n    if isinstance(g_db, Grid) and isinstance(g_db.Curve, Line):\r\n        g_ref = Reference(g_db)\r\n        grids.append((g_db.Curve, g_ref))\r\n\r\n# ---------- MAIN ----------\r\nsuccess = []\r\nfailures = []\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nfor idx, (col_ref, vec) in enumerate(zip(col_refs, vectors)):\r\n    try:\r\n        if not col_ref or not vec:\r\n            failures.append(\"Index {}: Missing reference or vector\".format(idx))\r\n            continue\r\n\r\n        line = vec.ToRevitType()\r\n        v_dir = unit_xy(line.Direction)  # Face direction (+ side)\r\n        axis = unit_xy(XYZ(-v_dir.Y, v_dir.X, 0))  # Dimension axis\r\n        v_end = line.GetEndPoint(1)\r\n\r\n        column = doc.GetElement(col_ref)\r\n        if not column:\r\n            failures.append(\"Index {}: Column not found\".format(idx))\r\n            continue\r\n\r\n        bb = column.get_BoundingBox(view)\r\n        if not bb:\r\n            failures.append(\"Index {}: No bounding box\".format(idx))\r\n            continue\r\n        w = abs(bb.Max.X - bb.Min.X)\r\n        d = abs(bb.Max.Y - bb.Min.Y)\r\n\r\n        opts = Options()\r\n        opts.ComputeReferences = True\r\n        opts.IncludeNonVisibleObjects = True\r\n        face_plus = face_minus = None\r\n        for sol in (g for g in column.get_Geometry(opts) if isinstance(g, Solid)):\r\n            for f in sol.Faces:\r\n                if face_matches(f,  v_dir): face_plus = f.Reference\r\n                if face_matches(f, -v_dir): face_minus = f.Reference\r\n            if face_plus and face_minus:\r\n                break\r\n        if not (face_plus and face_minus):\r\n            failures.append(\"Index {}: Could not find both + and - face references\".format(idx))\r\n            continue\r\n\r\n        # Nearest perpendicular grid\r\n        best_grid_ref, best_dist = None, 1e9\r\n        for g_curve, g_ref in grids:\r\n            if not is_perpendicular(v_dir, unit_xy(g_curve.Direction)):\r\n                continue\r\n            dist = g_curve.Project(v_end).Distance\r\n            if dist < best_dist:\r\n                best_dist, best_grid_ref = dist, g_ref\r\n        if not best_grid_ref:\r\n            failures.append(\"Index {}: No perpendicular grid found\".format(idx))\r\n            continue\r\n\r\n        # ---- Grid-to-nearest-face dimension (+ offset) ----\r\n        refs_gf = sorted([best_grid_ref, face_plus], key=lambda r: ref_sort_key(r, axis))\r\n        ref_arr_gf = ReferenceArray()\r\n        for r in refs_gf:\r\n            ref_arr_gf.Append(r)\r\n\r\n        off_vec_gf = XYZ(0, (d/2.0)*mult, 0) if abs(v_dir.X) > abs(v_dir.Y) else XYZ((w/2.0)*mult, 0, 0)\r\n        pt0_gf = line.GetEndPoint(0).Add(off_vec_gf)\r\n        pt1_gf = line.GetEndPoint(1).Add(off_vec_gf)\r\n        dim_line_gf = Line.CreateBound(pt0_gf, pt1_gf)\r\n\r\n        try:\r\n            dim_gf = doc.Create.NewDimension(view, dim_line_gf, ref_arr_gf, dimType) if dimType else doc.Create.NewDimension(view, dim_line_gf, ref_arr_gf)\r\n            success.append(dim_gf)\r\n        except Exception as e:\r\n            failures.append(\"Index {}: Grid-to-face dimension failed - {}\".format(idx, str(e)))\r\n\r\n        # ---- Face-to-face dimension (- offset) ----\r\n        refs_ff = sorted([face_plus, face_minus], key=lambda r: ref_sort_key(r, axis))\r\n        ref_arr_ff = ReferenceArray()\r\n        for r in refs_ff:\r\n            ref_arr_ff.Append(r)\r\n\r\n        off_vec_ff = XYZ(0, -(d/2.0)*mult, 0) if abs(v_dir.X) > abs(v_dir.Y) else XYZ(-(w/2.0)*mult, 0, 0)\r\n        pt0_ff = line.GetEndPoint(0).Add(off_vec_ff)\r\n        pt1_ff = line.GetEndPoint(1).Add(off_vec_ff)\r\n        dim_line_ff = Line.CreateBound(pt0_ff, pt1_ff)\r\n\r\n        try:\r\n            dim_ff = doc.Create.NewDimension(view, dim_line_ff, ref_arr_ff, dimType) if dimType else doc.Create.NewDimension(view, dim_line_ff, ref_arr_ff)\r\n            success.append(dim_ff)\r\n        except Exception as e:\r\n            failures.append(\"Index {}: Face-to-face dimension failed - {}\".format(idx, str(e)))\r\n\r\n    except Exception as e_outer:\r\n        failures.append(\"Index {}: Script error - {}\".format(idx, str(e_outer)))\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# ---------- OUTPUT ----------\r\nOUT = (success, failures)\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "7293a8b3404a4135b83b006e36da838c",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "d64fac539ccf44548840408c84b923dd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b91fe4cc083f4efdba41dc95f201735b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0cf82e9052da4995b8c6f0113d780744",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e41b964d478e4989a0da5edc74dcd67e",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f447244065c47beb2fc4214ab6b58c5",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "458f40f66e6f4ba0a06fdfe689289a00",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0ca4ddc2ebb54cd1b6b1586ca6fd8ba6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Views, DSRevitNodesUI",
      "SelectedIndex": -1,
      "SelectedString": "",
      "Id": "6cf02e07e198423782d8e6305816d13f",
      "NodeType": "ExtensionNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "53368300b67c44b888c6aa6ec6e4deb1",
          "Name": "Views",
          "Description": "The selected Views",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All views available in the current document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NumberType": "Double",
      "Id": "c1c383ac63d44d8aaf3841884ecf41c6",
      "NodeType": "NumberInputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6c40cf18304549d691a8e6667fbc3790",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number",
      "InputValue": 3.0
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "WatchWidth": 50.0,
      "WatchHeight": 38.0,
      "Id": "4b768196328c43f9b02af4514950fb48",
      "NodeType": "ExtensionNode",
      "Inputs": [
        {
          "Id": "97437a83c6b54191904d7b7f85b7d45f",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8803788077ef4f1aa839080b0c407fda",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# Robust probe – handles lists, ReferenceArrays, single References\r\nimport clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef collect_refs(obj):\r\n    \"\"\"\r\n    Recursively flatten whatever Dynamo hands us into a list of Revit References.\r\n    Accepts Reference, ReferenceArray, or any nested list/tuple thereof.\r\n    \"\"\"\r\n    if isinstance(obj, Reference):\r\n        return [obj]\r\n    if isinstance(obj, ReferenceArray):\r\n        return [obj[i] for i in range(obj.Size)]\r\n    if isinstance(obj, (list, tuple)):\r\n        out = []\r\n        for x in obj:\r\n            out.extend(collect_refs(x))\r\n        return out\r\n    return []  # unknown type → skip\r\n\r\nrefs = collect_refs(IN[0])   # wire ANY GLoci output here\r\nreport = []\r\n\r\nfor r in refs:\r\n    elem   = doc.GetElement(r.ElementId)\r\n    geoobj = elem.GetGeometryObjectFromReference(r)\r\n    n      = getattr(geoobj, 'FaceNormal', None)\r\n    n_str  = \"({:.0f},{:.0f},{:.0f})\".format(\r\n                round(n.X), round(n.Y), round(n.Z)) if n else \"—\"\r\n    report.append(\"ElemId {}  normal {}\".format(elem.Id.IntegerValue, n_str))\r\n\r\nOUT = report\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "390649d843f64239a92afc5a5b45f3ea",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "f113c7f946ed43488247d56ba4ba1303",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bbfef78103e34ba8b006c18a36e9e567",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# Robust probe – handles lists, ReferenceArrays, single References\r\nimport clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef collect_refs(obj):\r\n    \"\"\"\r\n    Recursively flatten whatever Dynamo hands us into a list of Revit References.\r\n    Accepts Reference, ReferenceArray, or any nested list/tuple thereof.\r\n    \"\"\"\r\n    if isinstance(obj, Reference):\r\n        return [obj]\r\n    if isinstance(obj, ReferenceArray):\r\n        return [obj[i] for i in range(obj.Size)]\r\n    if isinstance(obj, (list, tuple)):\r\n        out = []\r\n        for x in obj:\r\n            out.extend(collect_refs(x))\r\n        return out\r\n    return []  # unknown type → skip\r\n\r\nrefs = collect_refs(IN[0])   # wire ANY GLoci output here\r\nreport = []\r\n\r\nfor r in refs:\r\n    elem   = doc.GetElement(r.ElementId)\r\n    geoobj = elem.GetGeometryObjectFromReference(r)\r\n    n      = getattr(geoobj, 'FaceNormal', None)\r\n    n_str  = \"({:.0f},{:.0f},{:.0f})\".format(\r\n                round(n.X), round(n.Y), round(n.Z)) if n else \"—\"\r\n    report.append(\"ElemId {}  normal {}\".format(elem.Id.IntegerValue, n_str))\r\n\r\nOUT = report\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "fa78612f88cb4025b4fc18398b869cfc",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "c7c9c253fcdc4fab896baf5a4fece72f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6126327952aa41f3968181279c2c59aa",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# Robust probe – handles lists, ReferenceArrays, single References\r\nimport clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef collect_refs(obj):\r\n    \"\"\"\r\n    Recursively flatten whatever Dynamo hands us into a list of Revit References.\r\n    Accepts Reference, ReferenceArray, or any nested list/tuple thereof.\r\n    \"\"\"\r\n    if isinstance(obj, Reference):\r\n        return [obj]\r\n    if isinstance(obj, ReferenceArray):\r\n        return [obj[i] for i in range(obj.Size)]\r\n    if isinstance(obj, (list, tuple)):\r\n        out = []\r\n        for x in obj:\r\n            out.extend(collect_refs(x))\r\n        return out\r\n    return []  # unknown type → skip\r\n\r\nrefs = collect_refs(IN[0])   # wire ANY GLoci output here\r\nreport = []\r\n\r\nfor r in refs:\r\n    elem   = doc.GetElement(r.ElementId)\r\n    geoobj = elem.GetGeometryObjectFromReference(r)\r\n    n      = getattr(geoobj, 'FaceNormal', None)\r\n    n_str  = \"({:.0f},{:.0f},{:.0f})\".format(\r\n                round(n.X), round(n.Y), round(n.Z)) if n else \"—\"\r\n    report.append(\"ElemId {}  normal {}\".format(elem.Id.IntegerValue, n_str))\r\n\r\nOUT = report\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "cdf719af6d214e3588b75ffb215457a3",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "75798181555d4568ac234d5f60883eca",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7670bd6fd00d44f0a1631be2ebea37cd",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# Robust probe – handles lists, ReferenceArrays, single References\r\nimport clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitServices')\r\nfrom Autodesk.Revit.DB import *\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef collect_refs(obj):\r\n    \"\"\"\r\n    Recursively flatten whatever Dynamo hands us into a list of Revit References.\r\n    Accepts Reference, ReferenceArray, or any nested list/tuple thereof.\r\n    \"\"\"\r\n    if isinstance(obj, Reference):\r\n        return [obj]\r\n    if isinstance(obj, ReferenceArray):\r\n        return [obj[i] for i in range(obj.Size)]\r\n    if isinstance(obj, (list, tuple)):\r\n        out = []\r\n        for x in obj:\r\n            out.extend(collect_refs(x))\r\n        return out\r\n    return []  # unknown type → skip\r\n\r\nrefs = collect_refs(IN[0])   # wire ANY GLoci output here\r\nreport = []\r\n\r\nfor r in refs:\r\n    elem   = doc.GetElement(r.ElementId)\r\n    geoobj = elem.GetGeometryObjectFromReference(r)\r\n    n      = getattr(geoobj, 'FaceNormal', None)\r\n    n_str  = \"({:.0f},{:.0f},{:.0f})\".format(\r\n                round(n.X), round(n.Y), round(n.Z)) if n else \"—\"\r\n    report.append(\"ElemId {}  normal {}\".format(elem.Id.IntegerValue, n_str))\r\n\r\nOUT = report\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "ad8e1dcfc89746b6b84cae9aba206a58",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "e1bd9172e8f943c78f0967e393b1de85",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "104f1cf460ef413382781e2b4da03b99",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "53bb35d3fb78409980db0202875c0d06",
      "NodeType": "FunctionNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bb311a5dae4b4419a72b002f37db0149",
          "Name": "Document",
          "Description": "Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Revit.Application.Document.Current",
      "Replication": "Auto",
      "Description": "Get the current document\n\nDocument.Current: Document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "fed5ad3cd70b484b9515b6f1ff7b9ca3",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "2e8aca970f8e498da13938494172dc03",
          "Name": "document",
          "Description": "Revit.Application.Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "63972915169c4a748cb3cac6ab8f5433",
          "Name": "View",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "Revit.Application.Document.ActiveView",
      "Replication": "Auto",
      "Description": "Get the active view for the document\n\nDocument.ActiveView: View"
    },
    {
      "ConcreteType": "Dynamo.ComboNodes.DSModelElementsByCategorySelection, DSRevitNodesUI",
      "SelectedIndex": 270,
      "SelectedString": "OST_Grids",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167703",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167718",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167722",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-0016772c",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167736",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167740",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-0016774a",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167754",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-0016775e",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167768",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-00167772",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-0016777c",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-001677ae",
        "9a61a310-3e64-4f7d-ba97-274dafba81f6-001677b8"
      ],
      "Id": "1ee8e9c0a5274f58a146fc4223a8da22",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "335a467dbf7b418db4aaed7c7d087476",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select multiple elements from the Revit document filtered by Category."
    },
    {
      "ConcreteType": "Dynamo.ComboNodes.DSModelElementsByCategorySelection, DSRevitNodesUI",
      "SelectedIndex": 592,
      "SelectedString": "OST_StructuralColumns",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168550",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168551",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168552",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168553",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168554",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168555",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168556",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168557",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168558",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168559",
        "1577afa8-cc99-4fb5-a140-3687081cd958-0016855a",
        "1577afa8-cc99-4fb5-a140-3687081cd958-0016855b",
        "1577afa8-cc99-4fb5-a140-3687081cd958-0016855c",
        "1577afa8-cc99-4fb5-a140-3687081cd958-0016855d",
        "1577afa8-cc99-4fb5-a140-3687081cd958-0016855e",
        "1577afa8-cc99-4fb5-a140-3687081cd958-0016855f",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168560",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168561",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168562",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168563",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168564",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168565",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168566",
        "1577afa8-cc99-4fb5-a140-3687081cd958-00168579"
      ],
      "Id": "58730468aaf8479d9c78fbbe13b23b88",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "937e5ffd3ba2434a845af226f39f8111",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select multiple elements from the Revit document filtered by Category."
    }
  ],
  "Connectors": [
    {
      "Start": "802f030240dc4c15b092fe71a7caf33f",
      "End": "d49a8e866ab74be8865fe828bfac53aa",
      "Id": "c368fece8cd5448da6cb85f14f38b9ca",
      "IsHidden": "False"
    },
    {
      "Start": "a4bdc8560cbb4d438fa0da1d44fadee6",
      "End": "1dfebfeb6f5c400ca6a23813be530c2e",
      "Id": "e5da0fe8279941bf8f40e030679717c1",
      "IsHidden": "False"
    },
    {
      "Start": "a4bdc8560cbb4d438fa0da1d44fadee6",
      "End": "e43b093b009e4c46846e6847cdc5b5af",
      "Id": "1e113f22a70d42c68d11f4311ab04952",
      "IsHidden": "False"
    },
    {
      "Start": "b56a74b34a8d46ce953be69e9399a7c9",
      "End": "73490712f9b44d6e8927ed4fb53b3d6b",
      "Id": "0babecf9161a4faa9e3a1bc77223fd60",
      "IsHidden": "False"
    },
    {
      "Start": "b56a74b34a8d46ce953be69e9399a7c9",
      "End": "0e3213fd2d6b4782bc76dab1b9124c04",
      "Id": "e814e7171e6745aca447c64d3fd9993f",
      "IsHidden": "False"
    },
    {
      "Start": "b56a74b34a8d46ce953be69e9399a7c9",
      "End": "65d431921f644c2f98abdbce330410c7",
      "Id": "d68bbe7e23c24389875be393993750c6",
      "IsHidden": "False"
    },
    {
      "Start": "086dc84d71614410a0936ddfb366c1da",
      "End": "5f8a6b35f6a44d18b827684ec11a70b4",
      "Id": "c45bd65a36c442ad98265b2ec23c8b5b",
      "IsHidden": "False"
    },
    {
      "Start": "086dc84d71614410a0936ddfb366c1da",
      "End": "000e844121044ce39bf3693e40ab26d7",
      "Id": "37d3fcedb0c04aab99b8900e50185186",
      "IsHidden": "False"
    },
    {
      "Start": "086dc84d71614410a0936ddfb366c1da",
      "End": "32ce206b2baf4e3a8ca87c45c41cc888",
      "Id": "e421182f5a2b45e0bc6307f600326884",
      "IsHidden": "False"
    },
    {
      "Start": "8cd5f644e775403e8721d754110f4e39",
      "End": "cdf8abc567cd47049190c19f3ee76a1e",
      "Id": "e0d939bdb9b34d4a9a536fd0ba3dcd30",
      "IsHidden": "False"
    },
    {
      "Start": "8cd5f644e775403e8721d754110f4e39",
      "End": "186fb717c9044a4ea27d803bd25e4ece",
      "Id": "62927525a8294e68b5fb1b7bbab370a7",
      "IsHidden": "False"
    },
    {
      "Start": "231393d60f99417889b3eb1c8d1e6cc7",
      "End": "973c8da38c7c44398f176cf58d0265cb",
      "Id": "00b522012cdc4f2fbc95f02f6c921100",
      "IsHidden": "False"
    },
    {
      "Start": "231393d60f99417889b3eb1c8d1e6cc7",
      "End": "7de5bdb4fdfb4f9e92445d37d4f07a44",
      "Id": "a1a294887ca34061bf9946e7948fa21c",
      "IsHidden": "False"
    },
    {
      "Start": "24814843236b44bdbc0789f5c1ec86fb",
      "End": "b47cbecc128d4bda8cd665498040d73c",
      "Id": "a15eb42536874cc6895858d1d7fda889",
      "IsHidden": "False"
    },
    {
      "Start": "1190d32b5aa744ad990911bacfeb6ab0",
      "End": "ea3fe0216367475691f38c55bd51f947",
      "Id": "1bd798dce4d24b058093137b73a38835",
      "IsHidden": "False"
    },
    {
      "Start": "1190d32b5aa744ad990911bacfeb6ab0",
      "End": "599e5a20d0304c3787385691637379fb",
      "Id": "c7b9bfca269543f28467cbbe1aaa0a69",
      "IsHidden": "False"
    },
    {
      "Start": "0c516a7a876a4b3ca02f591825eeb1a6",
      "End": "34774e2b9ada4dd2b1cbf6da7bc50a10",
      "Id": "7d67af1fef9b4c62bb2f25d03cdf8917",
      "IsHidden": "False"
    },
    {
      "Start": "0c516a7a876a4b3ca02f591825eeb1a6",
      "End": "efeae288951b4f6bac962a76732a0408",
      "Id": "29935d7fd4844571b8315a9f5c5d55f8",
      "IsHidden": "False"
    },
    {
      "Start": "0ff9d982b2af4e549136f1edab5b33a4",
      "End": "46b29bff0a67498f9d77e6291d5ab335",
      "Id": "9106278d1b67496b82f6ecaff1b33dca",
      "IsHidden": "False"
    },
    {
      "Start": "d7bc467eb1fb4a1cad1230f734a712f9",
      "End": "028cace605a3435bb4157088f7c837e6",
      "Id": "8c79c518e961487ca05a242c0c4396e9",
      "IsHidden": "False"
    },
    {
      "Start": "38b75a4df96d480f93495e9dc19d512f",
      "End": "6f78b6977bed4be6af18edd9639f0876",
      "Id": "591b6a6bf2aa4a04b5ae4699bfa661c4",
      "IsHidden": "False"
    },
    {
      "Start": "e9e9e5e21b9246cdb1e0e48c6ed6bac4",
      "End": "391af9e34b75432bb39d641b6620781f",
      "Id": "c1038837c666465e910632c8c69c5825",
      "IsHidden": "False"
    },
    {
      "Start": "4d0db00c916f4d3cb8557b9c7cdeb648",
      "End": "1b9b1f268baa47c8abbf3684adbcf929",
      "Id": "de1233afe661405982b2951c8ab72667",
      "IsHidden": "False"
    },
    {
      "Start": "4d0db00c916f4d3cb8557b9c7cdeb648",
      "End": "60ad0ba519294d25a9b80f5d4e6116d9",
      "Id": "eb82241d87784c758b503a18952d0549",
      "IsHidden": "False"
    },
    {
      "Start": "ce5260aa600b45c290fa0536bd7c0bd9",
      "End": "6349f81924444727a7c0364edfdc4200",
      "Id": "e474b0072cde496e996cdd99aa612d06",
      "IsHidden": "False"
    },
    {
      "Start": "ce5260aa600b45c290fa0536bd7c0bd9",
      "End": "45e22310caa34b94b34e5e20ec2d7744",
      "Id": "25c7dff9b96744d185a286d45606f46a",
      "IsHidden": "False"
    },
    {
      "Start": "84277273567145688c993ac9dcdc00c7",
      "End": "e793c6f51ec5497fab179e48e7eee5e3",
      "Id": "27944f43dfa24d6586861e3688dcb372",
      "IsHidden": "False"
    },
    {
      "Start": "84277273567145688c993ac9dcdc00c7",
      "End": "46e9d7a326364fa895586b6faf4d7e11",
      "Id": "63755f4be1904d5eb519e83572589114",
      "IsHidden": "False"
    },
    {
      "Start": "84277273567145688c993ac9dcdc00c7",
      "End": "5bd41bd4ecdd4623bfdc732fdee25c49",
      "Id": "fdb037253a4a46399ca9d7ecc8686e88",
      "IsHidden": "False"
    },
    {
      "Start": "ffe21cbc9b8b435ba4274db9b037e23a",
      "End": "f2807a2728e04981b116d2ee6c8e4151",
      "Id": "0a46e9d70d244531b7f2f8b0dfa67cb6",
      "IsHidden": "False"
    },
    {
      "Start": "44c0bcf2515a4001b50d8fb98b2a6b06",
      "End": "2fe9b6dc45404606bfdd475eab2e1fb1",
      "Id": "526cc1045ce64cf78d474b092158ec10",
      "IsHidden": "False"
    },
    {
      "Start": "e31eba8369b144d9970c39f36b4199ff",
      "End": "eeb461e96a2a48e088c02229660ef436",
      "Id": "8d2afc153210424fa3f79d77d6a46311",
      "IsHidden": "False"
    },
    {
      "Start": "f13a8d40244b4bf1bb73f3561710d014",
      "End": "914a4b5f1b694c19a7a71e2e61b84a8c",
      "Id": "6af5e9549fda4eeabbb1c8a9bce8d008",
      "IsHidden": "False"
    },
    {
      "Start": "2b454fcf516945c089b23f771689a761",
      "End": "4f442de1575c48a6a0b0aeb3d52764b1",
      "Id": "554d59df8b894b9c9060836187cbda06",
      "IsHidden": "False"
    },
    {
      "Start": "5bfd478a95714bf1aa1bfb1d020570be",
      "End": "a97b8f5d8d884f359fd587e431cbbe46",
      "Id": "e4969f3f0a7d48eb84402704ad12fdcc",
      "IsHidden": "False"
    },
    {
      "Start": "532634dbaaef4b49956e3e1ec986b36b",
      "End": "077df5b40af84c00ab87002b0ecddee9",
      "Id": "1f9877f8c41c4234bec93ce3bed36a27",
      "IsHidden": "False"
    },
    {
      "Start": "532634dbaaef4b49956e3e1ec986b36b",
      "End": "367082cca67e4f4999b3afef5943b477",
      "Id": "8ad5dceab6274a55bac3ef17e0e87e5c",
      "IsHidden": "False"
    },
    {
      "Start": "872bdb9e9d014138a709c0c810d32d77",
      "End": "67ead460238b43abb166dfc3cbf81885",
      "Id": "2ad4d7251a9c48ccaf4dc0c598de8ffb",
      "IsHidden": "False"
    },
    {
      "Start": "15bcd508c27e422d901353ea0366dd8b",
      "End": "c61b1ecf57924ff5a88d93d47dfce4ed",
      "Id": "b712e89537c848fab0a31bd0469f3745",
      "IsHidden": "False"
    },
    {
      "Start": "1d7a04842a9348b5957c0742ea4c8e39",
      "End": "0bd010c9471144f7bc1c18b938d9f963",
      "Id": "243f9147bbd34c0fa398e8695e6b1115",
      "IsHidden": "False"
    },
    {
      "Start": "1d7a04842a9348b5957c0742ea4c8e39",
      "End": "2abf920e3f4a4e778181d19f42e137a9",
      "Id": "5b2294b45d1447a2a3e85bf12758666e",
      "IsHidden": "False"
    },
    {
      "Start": "6885904df0884578b0d92d541867bbbc",
      "End": "d29c639b99e3465794a8867908e2f233",
      "Id": "220bcf95f6274a2a8fcf8c428f541c57",
      "IsHidden": "False"
    },
    {
      "Start": "dcc8f67eb68645d28e3bb7c03132bc6c",
      "End": "416b754631e04b2b8af80b9e3a1cd05e",
      "Id": "116ac72c8165439fb257915b229fc154",
      "IsHidden": "False"
    },
    {
      "Start": "ccf532776f43465f901381121e6e521c",
      "End": "5fbf700e7e0a42c09ec94f4fae29ee64",
      "Id": "ff358f37151a4dd79df463a4add72106",
      "IsHidden": "False"
    },
    {
      "Start": "ccf532776f43465f901381121e6e521c",
      "End": "b91fe4cc083f4efdba41dc95f201735b",
      "Id": "2e79ee882ed4473fbe108ba8ff4ebf16",
      "IsHidden": "False"
    },
    {
      "Start": "4c00a930e26841abb320639a7933d928",
      "End": "6006eccc7c9d435f9aff0186134e1642",
      "Id": "52bcaf1634064295a8343528edc767a2",
      "IsHidden": "False"
    },
    {
      "Start": "6cf0fe6276d045e9b1ea36fc846318e3",
      "End": "8c7a5c49f53f42af9b153ff9e249f21c",
      "Id": "71107f23e8694164bae1fb9487e0c4a3",
      "IsHidden": "False"
    },
    {
      "Start": "fc08d71b0b30411b8a382b8daf9e3780",
      "End": "ee8c0ea5a1cf4a7193f2399ae01774af",
      "Id": "c076e7dd479a4686bc5ecaec5f991e58",
      "IsHidden": "False"
    },
    {
      "Start": "81cebe3d4c4e4f30893638542314951c",
      "End": "7723d7fa1c7b49d69d4fa89d504ba68f",
      "Id": "68ff04465beb463aac1e5f8ec617f7bf",
      "IsHidden": "False"
    },
    {
      "Start": "6e9b0e61460443f9808300291f480ec1",
      "End": "dc540cb9586a4278aece093701ab9806",
      "Id": "afb07e955b974a8ab7f556aac4f1adb6",
      "IsHidden": "False"
    },
    {
      "Start": "6e9b0e61460443f9808300291f480ec1",
      "End": "f113c7f946ed43488247d56ba4ba1303",
      "Id": "99346949d11f41bea9f1a78c8f6426a4",
      "IsHidden": "False"
    },
    {
      "Start": "34d874e87c9343de84f977df26438480",
      "End": "7d699c0fc3c94738ad9d428c3574f1ac",
      "Id": "622f3e42d879452dbecb49c772786c34",
      "IsHidden": "False"
    },
    {
      "Start": "34d874e87c9343de84f977df26438480",
      "End": "75798181555d4568ac234d5f60883eca",
      "Id": "ebbf0bf4fbd74a0e9f7f42cf0e04c366",
      "IsHidden": "False"
    },
    {
      "Start": "b19f1ac76283404fb4e311af19fe44b4",
      "End": "c86acbd0b1384f43a2429b8ac92be804",
      "Id": "830aca5e8a5043469fcc082e1d90948c",
      "IsHidden": "False"
    },
    {
      "Start": "b19f1ac76283404fb4e311af19fe44b4",
      "End": "e1bd9172e8f943c78f0967e393b1de85",
      "Id": "763c4e48d1af4d9a8b799a13b3614291",
      "IsHidden": "False"
    },
    {
      "Start": "a30f3bb8481940d8b1af7ab8a7eb668d",
      "End": "4b9729e813d4468a89bfb8b08fdb435d",
      "Id": "724f6106dcfc48acb5f806940a6619bc",
      "IsHidden": "False"
    },
    {
      "Start": "a30f3bb8481940d8b1af7ab8a7eb668d",
      "End": "c7c9c253fcdc4fab896baf5a4fece72f",
      "Id": "338065f33d674883b710fe0db30dff5b",
      "IsHidden": "False"
    },
    {
      "Start": "629735eb67274ffb8276982525d603c0",
      "End": "1fd25b941496457590c6ac07044065ad",
      "Id": "0c2c4d10c50848d2a7a1cf73126e6923",
      "IsHidden": "False"
    },
    {
      "Start": "629735eb67274ffb8276982525d603c0",
      "End": "a2fe215792ed416bb2307358418dae45",
      "Id": "3c52bb109ea445d6a7d7b93e419b5df7",
      "IsHidden": "False"
    },
    {
      "Start": "897af15a78db4fe0b6ec9a63dff94ba6",
      "End": "79cbbda8e850437e8eb006e439a36d48",
      "Id": "7e665dab17da48cb90f03bd09c3480b5",
      "IsHidden": "False"
    },
    {
      "Start": "897af15a78db4fe0b6ec9a63dff94ba6",
      "End": "e41b964d478e4989a0da5edc74dcd67e",
      "Id": "1d0baae62dc548e6b2f1cee9d218095c",
      "IsHidden": "False"
    },
    {
      "Start": "4f227cc3d10c407fb31e20865e1b11df",
      "End": "eb80e1472240400184db222b8febd5bd",
      "Id": "1f17e2e1cd1e4258bae6247edf083348",
      "IsHidden": "False"
    },
    {
      "Start": "df860a8f29604228a8843392d15a98e4",
      "End": "de3e392420f84c97b5ccd7d316ad9d5a",
      "Id": "7986a46a6b26467bb4a7f6db46b7e8a6",
      "IsHidden": "False"
    },
    {
      "Start": "f7b6aed6e80244a98d91c5d27cdba4aa",
      "End": "5d1ff659c0d243699dcc65f16722a32f",
      "Id": "820e7b40e0124dda984710d5fc984463",
      "IsHidden": "False"
    },
    {
      "Start": "f7b6aed6e80244a98d91c5d27cdba4aa",
      "End": "cdb040e73401408ea84a50e9afc67e28",
      "Id": "fec13586b22843649c4c5517f98830b9",
      "IsHidden": "False"
    },
    {
      "Start": "c50284bc03834f37b8bb5beae74cf5cd",
      "End": "e73e57deb77c404bbb6444b5deb34283",
      "Id": "86dea612dbca49e187d73912ee571020",
      "IsHidden": "False"
    },
    {
      "Start": "9f63449056e14803957c062b57c5127e",
      "End": "0cf82e9052da4995b8c6f0113d780744",
      "Id": "86cca61af7474ba2a38418eb3097751e",
      "IsHidden": "False"
    },
    {
      "Start": "49c5b0e44c354d5aaffd785544d1e870",
      "End": "4f447244065c47beb2fc4214ab6b58c5",
      "Id": "ec94fb3fc86a4d19b1c427b35e5e2de9",
      "IsHidden": "False"
    },
    {
      "Start": "49c5b0e44c354d5aaffd785544d1e870",
      "End": "a82f6f21b58a4cb69642c995b31ce773",
      "Id": "bd2034788d5f49db97603b42958cbfe5",
      "IsHidden": "False"
    },
    {
      "Start": "6ec253421f82458b8f6771d78764ce50",
      "End": "c916f24427924a48b12cd085eb46cad5",
      "Id": "75745c0c2ca0451f844d9cb8b8696ec5",
      "IsHidden": "False"
    },
    {
      "Start": "6ec253421f82458b8f6771d78764ce50",
      "End": "e1564fbaf93c492ba9ace3cc72caae5c",
      "Id": "1040f02fe42348228de4f62ce3c2f935",
      "IsHidden": "False"
    },
    {
      "Start": "3ca8bd8a20384cc3bcbc3785e50d220b",
      "End": "a7832ed103bc4d7ea2e372c9c9ff9430",
      "Id": "09fbfc285ef24f1285821a727be68ef0",
      "IsHidden": "False"
    },
    {
      "Start": "3e4966e9bb9743b7b3c9249c1bc3eb34",
      "End": "b5aee7f987884a7aab54ca0ad570abd1",
      "Id": "adb71ad1394b4d80bc6b5263907da39f",
      "IsHidden": "False"
    },
    {
      "Start": "dfa096c6281c4f4d8c2d7da6fb595c25",
      "End": "97437a83c6b54191904d7b7f85b7d45f",
      "Id": "0983dcd9829c436da721fcba7b320d89",
      "IsHidden": "False"
    },
    {
      "Start": "6c40cf18304549d691a8e6667fbc3790",
      "End": "7d1d0ac845f9432b8eff90ac8b7a0cb2",
      "Id": "e10f4569d0a24ae6a7fc75af0c998e61",
      "IsHidden": "False"
    },
    {
      "Start": "6c40cf18304549d691a8e6667fbc3790",
      "End": "458f40f66e6f4ba0a06fdfe689289a00",
      "Id": "fabbe37cec8242a8aa6d9da78ac68b4c",
      "IsHidden": "False"
    },
    {
      "Start": "bb311a5dae4b4419a72b002f37db0149",
      "End": "2e8aca970f8e498da13938494172dc03",
      "Id": "4885b94fa42c47138dca126a100d72aa",
      "IsHidden": "False"
    },
    {
      "Start": "63972915169c4a748cb3cac6ab8f5433",
      "End": "92e93e0a47f946b6ba8aa2316894b26d",
      "Id": "31ee3a03804741c5afe9c51ea591c0cf",
      "IsHidden": "False"
    },
    {
      "Start": "63972915169c4a748cb3cac6ab8f5433",
      "End": "d64fac539ccf44548840408c84b923dd",
      "Id": "adc3594109934259a0f424236ce6de3d",
      "IsHidden": "False"
    },
    {
      "Start": "335a467dbf7b418db4aaed7c7d087476",
      "End": "bb924a505ed94476851c31253c351e59",
      "Id": "8345143e8b7341af84e3124c925e2c3c",
      "IsHidden": "False"
    },
    {
      "Start": "335a467dbf7b418db4aaed7c7d087476",
      "End": "3b37d1feb40748dbaadf784507656a3f",
      "Id": "b184483c5ace44daadc23aef641096d9",
      "IsHidden": "False"
    },
    {
      "Start": "937e5ffd3ba2434a845af226f39f8111",
      "End": "6964788fa7de4dbabe9744579f84b69f",
      "Id": "ae1ae95f34244956a82a83a52c12e7aa",
      "IsHidden": "False"
    },
    {
      "Start": "937e5ffd3ba2434a845af226f39f8111",
      "End": "ce1e436c594e465c81e23ea2f63f48e7",
      "Id": "d8bbee9b217d46dca78cf9697753e73e",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [
    "c357c643-1fcb-48fa-9ae3-ba2e68004d94",
    "c74cdf50-fd7b-436a-8e2d-6b6e50879034"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Genius Loci",
      "Version": "2024.5.29",
      "ReferenceType": "Package",
      "Nodes": [
        "ea207a37e3104a6eac876f397d3fa371",
        "4fd5859de567406a959dca029f8f4d01",
        "e757efef4024424fb7a40646c0cd6e56"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.19",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "6.1",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 100.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.19.3.6394",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": 59058.137457089295,
      "EyeY": 14748.392601430518,
      "EyeZ": 37219.515268732765,
      "LookX": -26532.646246151791,
      "LookY": -33926.153734243017,
      "LookZ": -36766.540171076515,
      "UpX": -0.24263864755630493,
      "UpY": 0.9099612832069397,
      "UpZ": -0.33629891276359558
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "d77e9cbaf4d144cb85306095892d171c",
        "Name": "All Elements of Category",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -2016.9869376245597,
        "Y": -1633.4069905209524
      },
      {
        "Id": "c40245fed76f4fc7b89461e554cc6edf",
        "Name": "Grid.Curve",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -1665.0260427194032,
        "Y": -1455.7905742952798
      },
      {
        "Id": "db938b722da44215935d28d8bf236450",
        "Name": "Element.BoundingBox",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -1647.1419403057989,
        "Y": -1881.3930501338659
      },
      {
        "Id": "40c0be85e60b49c58eb4f0000c2bd43e",
        "Name": "BoundingBox.MinPoint",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": -1305.8864105364055,
        "Y": -1878.5443405065259
      },
      {
        "Id": "67753468a4b1417180f915aa0265633f",
        "Name": "BoundingBox.MaxPoint",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": -1291.5740501188084,
        "Y": -1639.6875407865473
      },
      {
        "Id": "7e8dc314273c4ee2a0bec97ee978d4c2",
        "Name": "Min x",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -374.88292767991459,
        "Y": -2044.792267518699
      },
      {
        "Id": "d686e2e71dc545fab5ce9ef2b1b16b64",
        "Name": "Min y",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -374.88292767991459,
        "Y": -1897.542267518699
      },
      {
        "Id": "ee56d1b885814c0e86bd25d614c73094",
        "Name": "Min z",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 462.11707232008541,
        "Y": -1597.042267518699
      },
      {
        "Id": "82eb98fd43a34decb3af4dbe5eebc147",
        "Name": "Max x",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": -371.19595028156664,
        "Y": -2430.2187928840044
      },
      {
        "Id": "3bbcd1328faa47a78af4a907d2d79b2e",
        "Name": "Max y",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -368.66528646703978,
        "Y": -2280.0629969081715
      },
      {
        "Id": "113009fe601f42788ff8c51c9038bd13",
        "Name": "Max z",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 462.11707232008541,
        "Y": -1450.0422675186987
      },
      {
        "Id": "f26231c47d6e49a29037551d303ce19f",
        "Name": "+",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": -72.882927679914587,
        "Y": -1993.542267518699
      },
      {
        "Id": "fcc1bf0c35004c3a871c4f46d9745745",
        "Name": "+",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": -30.7925421762327,
        "Y": -2178.3249192960106
      },
      {
        "Id": "9e99ad499739459f8a99c3d7c744af44",
        "Name": "+",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": 779.2979659319941,
        "Y": -1654.4562736042369
      },
      {
        "Id": "41b8f083836042559d7a2491a3881a60",
        "Name": "X Mid",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": 184.11707232008541,
        "Y": -1915.542267518699
      },
      {
        "Id": "58fc7d64a25e43f8846090d506983f55",
        "Name": "Z Mid",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": 1024.1170723200853,
        "Y": -1796.042267518699
      },
      {
        "Id": "3655cfa026b645fcacef905b45d7948d",
        "Name": "Y Mid",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": 224.67382370191206,
        "Y": -2190.5169757037984
      },
      {
        "Id": "41a57546715d4338a5e9b809f3a2994d",
        "Name": "Number",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -72.882927679914587,
        "Y": -1803.542267518699
      },
      {
        "Id": "7f0456ae28944e5b93fe91761354b462",
        "Name": "X+",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 462.11707232008541,
        "Y": -2446.0422675186987
      },
      {
        "Id": "4ad16038c6714443aa83ed74fbea7c49",
        "Name": "X-",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 468.22059527086878,
        "Y": -2247.7751941579618
      },
      {
        "Id": "5f989981ae1c4e22af705a7202e0d9e1",
        "Name": "Y-",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 462.11707232008541,
        "Y": -1809.042267518699
      },
      {
        "Id": "24d7696561864e289675c4a48ae7994f",
        "Name": "Y+",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 462.11707232008541,
        "Y": -2022.042267518699
      },
      {
        "Id": "e8adbef495664bf69a23e1cdd166048b",
        "Name": "List Create",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 764.1170723200853,
        "Y": -2121.0422675186992
      },
      {
        "Id": "d46c8462b4a24ebaa61cbcf25602ffbb",
        "Name": "List Create",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 764.1170723200853,
        "Y": -1943.042267518699
      },
      {
        "Id": "b25322d3c3714119aa48929144a8ddd3",
        "Name": "Create Vectors",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 1393.02078804138,
        "Y": -2042.5356882962378
      },
      {
        "Id": "a08e53138b86441bb9da1a2a93d64298",
        "Name": "List.Transpose",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 1024.1170723200853,
        "Y": -2091.0422675186992
      },
      {
        "Id": "05c32433f5224a0d9f186e247cfe7ae8",
        "Name": "List.Transpose",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 1024.1170723200853,
        "Y": -1943.042267518699
      },
      {
        "Id": "8a3989a0990b4141b2a5b17c8470df98",
        "Name": "X Vector",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 1989.5565172449187,
        "Y": -1910.4860137627438
      },
      {
        "Id": "d4bc9e2ea7124f46a4904fc3d3551a03",
        "Name": "Code Block",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 1630.8587085777549,
        "Y": -1766.1322973770423
      },
      {
        "Id": "87db0d70e586486eadaf673736eeaabd",
        "Name": "Y Vector",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2006.9850145408732,
        "Y": -1697.6348428546739
      },
      {
        "Id": "ea207a37e3104a6eac876f397d3fa371",
        "Name": "Element Surfaces References",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2222.3230100727892,
        "Y": -984.58306287938888
      },
      {
        "Id": "ef5668faf4364ee6854b41a7eb6e0ff8",
        "Name": "List.Flatten",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2688.8537254833127,
        "Y": -985.13303879173611
      },
      {
        "Id": "e44e5787dcd644518aba362803a37ef2",
        "Name": "List.Flatten",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2684.70082391341,
        "Y": -521.75697669287933
      },
      {
        "Id": "0725e92cb6354ee6b77b26264c87a858",
        "Name": "List.Flatten",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2684.9848634939472,
        "Y": -676.28084663866537
      },
      {
        "Id": "96f50b5598254ab9826aad9c6ad42268",
        "Name": "List.Flatten",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2686.0661836605327,
        "Y": -831.63244119179876
      },
      {
        "Id": "0a725bb60f284f48816e57b85d98ad53",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": false,
        "X": 346.34122578673055,
        "Y": 436.57445620806004
      },
      {
        "Id": "0d0a6c24a9fe403cad1fc85d5049c1f2",
        "Name": "Horizontal Grid",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 620.34122578673055,
        "Y": 664.354538162014
      },
      {
        "Id": "9e5047adba234e3eae0e51eb85290cc4",
        "Name": "Code Block",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 346.34122578673055,
        "Y": 584.22945620806013
      },
      {
        "Id": "92c2dc5eb296411faab0edb658e35dbf",
        "Name": "Vertical Grid",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 620.34122578673055,
        "Y": 330.79437425410595
      },
      {
        "Id": "5964293c9730428da9aed46620d3e876",
        "Name": "X direction Column references",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3172.5080143736868,
        "Y": -960.638993081177
      },
      {
        "Id": "140801384bc1405a8452353a00eff72c",
        "Name": "Y  direction column references",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3173.5414211219522,
        "Y": -686.64415347746
      },
      {
        "Id": "4fd5859de567406a959dca029f8f4d01",
        "Name": "Element Reference",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 909.34122578673055,
        "Y": 664.354538162014
      },
      {
        "Id": "e757efef4024424fb7a40646c0cd6e56",
        "Name": "Element Reference",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 909.34122578673055,
        "Y": 330.79437425410595
      },
      {
        "Id": "0d3af6338cc344cfa3214c8ffd125315",
        "Name": "List.GetItemAtIndex",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3428.8389794157583,
        "Y": -2579.4540357115075
      },
      {
        "Id": "036d0f30219747309c2fd4a1b7476e84",
        "Name": "Element.Name",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3162.2073035834383,
        "Y": -2829.3786433466175
      },
      {
        "Id": "ee89902c14ba43d1a14029cf390982d6",
        "Name": "All Elements of Class",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2686.4381362426188,
        "Y": -2751.2657201313227
      },
      {
        "Id": "7bc58f90242445c9b7b224a605f99c25",
        "Name": "Element Classes",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2349.9743565106482,
        "Y": -2733.7799120968975
      },
      {
        "Id": "bffa187accb14d6ca1ba40fd7e041fc8",
        "Name": "Code Block",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 2869.6924446302387,
        "Y": -2583.8637066601386
      },
      {
        "Id": "8d78ac0532bf470992d28de58cfc5717",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 6611.0024689194843,
        "Y": -882.032199503127
      },
      {
        "Id": "7293a8b3404a4135b83b006e36da838c",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 6571.628283147581,
        "Y": -78.262996134032278
      },
      {
        "Id": "6cf02e07e198423782d8e6305816d13f",
        "Name": "Select View",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3426.6170772743103,
        "Y": -2135.2537233534244
      },
      {
        "Id": "c1c383ac63d44d8aaf3841884ecf41c6",
        "Name": "offset value =  Value x 1/2 the face size",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 5958.3965743142335,
        "Y": -362.33505118113635
      },
      {
        "Id": "4b768196328c43f9b02af4514950fb48",
        "Name": "Watch",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 7051.4602233224259,
        "Y": -642.8618619695884
      },
      {
        "Id": "390649d843f64239a92afc5a5b45f3ea",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3004.5611387279832,
        "Y": -1867.292685995073
      },
      {
        "Id": "fa78612f88cb4025b4fc18398b869cfc",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3195.6087030489848,
        "Y": -1861.4694999490791
      },
      {
        "Id": "cdf719af6d214e3588b75ffb215457a3",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3570.567770749356,
        "Y": -1857.248951897315
      },
      {
        "Id": "ad8e1dcfc89746b6b84cae9aba206a58",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3383.9408570708447,
        "Y": -1857.9841780420443
      },
      {
        "Id": "53bb35d3fb78409980db0202875c0d06",
        "Name": "Document.Current",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 3956.0069383389164,
        "Y": -1879.34670880572
      },
      {
        "Id": "fed5ad3cd70b484b9515b6f1ff7b9ca3",
        "Name": "Document.ActiveView",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 4264.1117590477024,
        "Y": -1772.8877260404895
      },
      {
        "Id": "1ee8e9c0a5274f58a146fc4223a8da22",
        "Name": "Pick Grids",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -2319.6682539374115,
        "Y": -1490.1843036480886
      },
      {
        "Id": "58730468aaf8479d9c78fbbe13b23b88",
        "Name": "Pick Columns",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -2291.55357643285,
        "Y": -1884.7500618907882
      }
    ],
    "Annotations": [
      {
        "Id": "5abaae4765e44827ae794e0438712ad3",
        "Title": "Getting Columns and grids",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "d77e9cbaf4d144cb85306095892d171c",
          "c40245fed76f4fc7b89461e554cc6edf",
          "db938b722da44215935d28d8bf236450",
          "67753468a4b1417180f915aa0265633f",
          "40c0be85e60b49c58eb4f0000c2bd43e",
          "1ee8e9c0a5274f58a146fc4223a8da22",
          "58730468aaf8479d9c78fbbe13b23b88"
        ],
        "HasNestedGroups": false,
        "Left": -2329.6682539374115,
        "Top": -1957.7500618907882,
        "Width": 1296.0942038186031,
        "Height": 645.95948759550834,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -1884.7500618907882,
        "InitialHeight": 572.36247430737126,
        "TextblockHeight": 63.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "e60a10b24db2497ca74510fd432cfb75",
        "Title": "Points of the faces",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7e8dc314273c4ee2a0bec97ee978d4c2",
          "d686e2e71dc545fab5ce9ef2b1b16b64",
          "ee56d1b885814c0e86bd25d614c73094",
          "82eb98fd43a34decb3af4dbe5eebc147",
          "3bbcd1328faa47a78af4a907d2d79b2e",
          "113009fe601f42788ff8c51c9038bd13",
          "f26231c47d6e49a29037551d303ce19f",
          "fcc1bf0c35004c3a871c4f46d9745745",
          "9e99ad499739459f8a99c3d7c744af44",
          "41b8f083836042559d7a2491a3881a60",
          "58fc7d64a25e43f8846090d506983f55",
          "3655cfa026b645fcacef905b45d7948d",
          "41a57546715d4338a5e9b809f3a2994d",
          "7f0456ae28944e5b93fe91761354b462",
          "4ad16038c6714443aa83ed74fbea7c49",
          "5f989981ae1c4e22af705a7202e0d9e1",
          "24d7696561864e289675c4a48ae7994f",
          "e8adbef495664bf69a23e1cdd166048b",
          "d46c8462b4a24ebaa61cbcf25602ffbb",
          "a08e53138b86441bb9da1a2a93d64298",
          "05c32433f5224a0d9f186e247cfe7ae8"
        ],
        "HasNestedGroups": false,
        "Left": -384.88292767991459,
        "Top": -2519.0422675186987,
        "Width": 1600.0,
        "Height": 1213.0,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -2446.0422675186987,
        "InitialHeight": 1141.0,
        "TextblockHeight": 63.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "60ab57139a794b779286a9abe85c5724",
        "Title": "Get dimesnion Type",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7bc58f90242445c9b7b224a605f99c25",
          "ee89902c14ba43d1a14029cf390982d6",
          "036d0f30219747309c2fd4a1b7476e84",
          "0d3af6338cc344cfa3214c8ffd125315",
          "bffa187accb14d6ca1ba40fd7e041fc8"
        ],
        "HasNestedGroups": false,
        "Left": 2339.9743565106482,
        "Top": -2902.3786433466175,
        "Width": 1321.86462290511,
        "Height": 484.92460763511008,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -2829.3786433466175,
        "InitialHeight": 394.92460763511008,
        "TextblockHeight": 63.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "5934f3693998431da14f6c9f514a3fdf",
        "Title": "Seperate horizontal and vertical grids",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "0a725bb60f284f48816e57b85d98ad53",
          "0d0a6c24a9fe403cad1fc85d5049c1f2",
          "9e5047adba234e3eae0e51eb85290cc4",
          "92c2dc5eb296411faab0edb658e35dbf",
          "4fd5859de567406a959dca029f8f4d01",
          "e757efef4024424fb7a40646c0cd6e56"
        ],
        "HasNestedGroups": false,
        "Left": 336.34122578673055,
        "Top": 257.79437425410595,
        "Width": 818.0,
        "Height": 580.56016390790808,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 330.79437425410595,
        "InitialHeight": 478.56016390790808,
        "TextblockHeight": 63.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "2ed6df56fac649f6991b7e896e0b53f0",
        "Title": "Place dimensions",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "8d78ac0532bf470992d28de58cfc5717",
          "7293a8b3404a4135b83b006e36da838c",
          "c1c383ac63d44d8aaf3841884ecf41c6"
        ],
        "HasNestedGroups": false,
        "Left": 5948.3965743142335,
        "Top": -955.032199503127,
        "Width": 846.6058946052508,
        "Height": 1190.7692033690946,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -882.032199503127,
        "InitialHeight": 948.76920336909473,
        "TextblockHeight": 63.0,
        "Background": "#FFFFC999"
      },
      {
        "Id": "259b22b24f744143a86198f5568aaef6",
        "Title": "Creating Shortest Vector",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "b25322d3c3714119aa48929144a8ddd3",
          "8a3989a0990b4141b2a5b17c8470df98",
          "d4bc9e2ea7124f46a4904fc3d3551a03",
          "87db0d70e586486eadaf673736eeaabd"
        ],
        "HasNestedGroups": false,
        "Left": 1383.02078804138,
        "Top": -2115.5356882962378,
        "Width": 822.96422649949318,
        "Height": 591.90084544156389,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -2042.5356882962378,
        "InitialHeight": 489.90084544156389,
        "TextblockHeight": 63.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "7c293bffb67f440bad178caf68f79de2",
        "Title": "Collecting References",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "ea207a37e3104a6eac876f397d3fa371",
          "ef5668faf4364ee6854b41a7eb6e0ff8",
          "e44e5787dcd644518aba362803a37ef2",
          "0725e92cb6354ee6b77b26264c87a858",
          "96f50b5598254ab9826aad9c6ad42268",
          "5964293c9730428da9aed46620d3e876",
          "140801384bc1405a8452353a00eff72c"
        ],
        "HasNestedGroups": false,
        "Left": 2212.3230100727892,
        "Top": -1058.133038791736,
        "Width": 1272.218411049163,
        "Height": 710.37606209885666,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -985.13303879173611,
        "InitialHeight": 608.37606209885678,
        "TextblockHeight": 63.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "eca8eba294cb48e081a3a5a9f20866b2",
        "Title": "Reference Face check",
        "DescriptionText": "<Double click here to edit group description>",
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "390649d843f64239a92afc5a5b45f3ea",
          "fa78612f88cb4025b4fc18398b869cfc",
          "cdf719af6d214e3588b75ffb215457a3",
          "ad8e1dcfc89746b6b84cae9aba206a58"
        ],
        "HasNestedGroups": false,
        "Left": 2994.5611387279832,
        "Top": -1940.292685995073,
        "Width": 760.00663202137275,
        "Height": 215.04373409775803,
        "FontSize": 36.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": -1867.292685995073,
        "InitialHeight": 155.04373409775803,
        "TextblockHeight": 63.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 1367.9090514097684,
    "Y": 1046.8104029111569,
    "Zoom": 0.39751693895031753
  }
}